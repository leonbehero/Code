Here’s a comprehensive list of smart, structured questions to ask your buddy (or mentor) to get up to speed quickly:

🔹 System Overview & Architecture
"Can you give me a high-level overview of the systems we work on?"

"What are the main components or services, and how do they interact?"

"Are we working in a monolith, microservices, or hybrid setup?"

"Do we use any specific architectural patterns, like MVC, MVVM, or layered architecture?"

🔹 Project Codebase
"Where should I start exploring in the codebase to understand the business logic?"

"Are there any key files, folders, or classes I should pay special attention to?"

"Are there areas of the codebase that are especially important, fragile, or high-priority?"

"Is there a documentation site or internal wiki for code explanations?"

🔹 Tech Stack & Tools
"Which frameworks and libraries are most commonly used in our project?"
(e.g., .NET Core/Framework, Entity Framework, Dapper, SignalR, etc.)

"Which tools do we use for version control, task tracking, and builds?"

"How do we handle environment configuration and secrets?"

"What does the local development setup look like?"

🔹 Database & Data Flow
"How is our database structured — is there a schema diagram or ERD I can review?"

"Do we follow any data normalization practices?"

"Are there any stored procedures, views, or data layers I should know about?"

"What’s the typical flow of data from front-end to back-end to database?"

🔹 Development Process
"What’s the usual flow for picking up a task — from JIRA (or other tool) to production?"

"How do we manage branches? Do we use feature branching, GitFlow, or something else?"

"What are the rules or guidelines for making a pull request?"

"Is there a code review checklist or style guide we follow?"

🔹 Testing & Deployment
"How do we write and run unit tests or integration tests?"

"What CI/CD tools do we use for builds and deployments?"

"Are there staging/test environments I can deploy to before production?"

🔹 Personal Learning & Contribution
"Are there any beginner-friendly tasks or tickets I can shadow or try working on?"

"If I want to learn more about a specific system, are there any internal training resources or past tech talks I can look into?"

"How do I raise questions or request help without disrupting others?"

"How do we normally communicate as a team — Slack, Teams, daily standups?"

💬 Bonus Questions to Build Trust and Learn Softly:
"If you were new here again, what would you focus on in your first month?"

"What’s one system or area you wish you’d understood earlier when you joined?"

"Is there anything I should avoid doing as a new dev — even if well-intended?"

Would you like this as a printable checklist or a digital doc template you can bring to your first week?


✅ Developer Workstation Setup Checklist
🔧 Hardware
 Laptop or desktop provided and powered on

 Docking station (if applicable) connected properly

 External monitors configured (extended display, resolution set)

 Keyboard, mouse, headset working

 Webcam and mic functional (for meetings)

🔐 Login & Access
 Able to log in with work credentials (Windows/SSO)

 Access to internal VPN or network (if required)

 Outlook or email system set up

 Access to Microsoft Teams / Slack / Zoom

 Internet access stable

🧑‍💻 Development Tools
 Visual Studio / VS Code installed and opens correctly

 Git or version control client installed

 SQL Server Management Studio or database tool installed

 Required SDKs/frameworks (e.g., .NET Core, .NET Framework) installed

 Local dev environment working (build/test a dummy project)

🛠 Access to Key Systems
 GitHub / GitLab / Azure DevOps access confirmed

 Access to task tracker (e.g., JIRA, YouTrack)

 Access to shared project repositories (clone access verified)

 Access to internal wikis / documentation (e.g., Confluence, Notion)

 Access to dev/staging environment (if applicable)

🧩 Configuration
 Environment variables / config files set up correctly

 Database connection strings configured

 Secrets/API keys securely stored (or available through secret manager)

 Able to run, debug, and test a local project

 Dev container or Docker (if used) working properly

📝 Useful Questions to Ask
“Can I walk through my setup with you to confirm everything looks right?”

“Is there a checklist or onboarding script you usually follow for new devs?”

“Do you use any internal dev templates or configuration guidelines I should follow?”

📦 Optional (If Used in Your Team)
 Access to Jira Service Desk or ticket queues

 Access to build/deployment pipelines (e.g., Azure Pipelines, Jenkins)

 Monitoring/logging tools (e.g., Kibana, Grafana, Sentry)

 Access to shared file drives or SharePoint


